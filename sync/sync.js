// Создаём класс Lodash
class Lodash {
    // Создаём функцию compact, принимающую массив
    compact(array) {
      // Возвращаем новый массив, используя старый массив и метод filter
        return array.filter(val => !!val)
    }
    
    // Создаём функцию groupBy, принимающую массив и проп
    groupBy(array, prop) {
        // На вход получаем массив при помощи функции reduce, где получаем коллбэк, который получает acc и текущее значение
        return array.reduce((acc, i) => {
          /*
           * Получаем ключ.
           * В случае, если prop равняется function, то ключ получаем при помощи функции prop, положив элемент i.
           * В обратном случае получаем ключ через i по свойству prop.
           */
          const key = typeof prop === 'function' ? prop(i) : i[prop]
          // Если в acc нет ключа key, то в таком случае acc[key] должен равняться массиву
          if (!acc[key]) {
            acc[key] = []
            // Каждый ключ объекта acc должен быть массивом
          }
          // В acc по ключу key складываем новое значение i
          acc[key].push(i)
          // Возвращаем acc
          return acc
          // Передаём вторым параметром передаём начальное значение acc, т.е. пустой объект
        }, {})
    }
}

// Экспортирум класс из файла
module.exports = Lodash