// Импортируем объект с помощью функции require
const {sum, nativeNull} = require('./comparison')

// Создаём функцию describe, принимаюшую параметрами название и коллбэк, где будем описывать сценарии для функции sum
describe('Функция Sum:', () => {
    // Вызываем функцию test и задаём название кейса (сценария), где опишем ожидаемый результат при выполнении функции sum
    test('должна вернуть сумму двух значений', () => {
        // Вызываем глобальную функцию expect, где описываем ожидаемый результат, т.е. при сложении двоек должна быть четвёрка
        expect(sum(2, 2)).toBe(4)
        // 
        expect(sum(2, 2)).toEqual(4)
    })
    
    // Создаём сценарий, где будем сравнивать результат вычисления функции sum с другими числами
    test('должна вернуть корректное значение при сравнении с другими числами', () => {
        // Результат выполнения функции должен быть больше 4
        expect(sum(2, 3)).toBeGreaterThan(4)
        // Результат выполнения функции должен быть больше или равен 5
        expect(sum(2, 3)).toBeGreaterThanOrEqual(5)
        // Результат выполнения функции должен быть меньше 6
        expect(sum(2, 3)).toBeLessThan(6)
        // Результат выполнения функции должен быть меньше или равен 5
        expect(sum(2, 3)).toBeLessThanOrEqual(5)
    })
    
    // Создаём сценарий, где ожидаем получить приближённый результат вычисления функции sum 
    test('должна сложить 2 числа и получить приближённое значение', () => {
      expect(sum(0.1, 0.2)).toBeCloseTo(0.3)
      // Суть данного сценария заключается в том, что в языках JS/TS существует такое понятие как "Потеря точности"
    })
})

// Создаём функцию describe, принимаюшую параметрами название и коллбэк, где будем описывать сценарии для функции nativeNull
describe('Функция nativeNull:', () => {
    
    test('должна возвращать значение null', () => {
      // Результат вычисления функции должен быть null
      expect(nativeNull()).toBe(null)
      // Здесь логика та же самая, но проверяем результат при помощи toBeNull
      expect(nativeNull()).toBeNull()
      // Результат вычисления функции должен быть ложным, т.е. undefined, null, 0 и т.д.
      expect(nativeNull()).toBeFalsy()
      // Результат вычисления функции должен быть defined
      expect(nativeNull()).toBeDefined()
      // Результат вычисления функции не должен быть истинным, т.е. числа, строки, объекты, массивы и т.д.
      expect(nativeNull()).not.toBeTruthy()
      // Результат вычисления функции не должен быть undefined
      expect(nativeNull()).not.toBeUndefined()
    })
    
})