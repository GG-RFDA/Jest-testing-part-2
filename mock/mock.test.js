// Импортируем функцию map
const {map} = require('./mock')

describe('Функция map', () => {
  // Создаём массив
  let array
  // Создаём переменную fn
  let fn
  
  // Создаём функцию beforeEach
  beforeEach(() => {
    // Складываем некоторые значения в массив
    array = [1, 2, 3, 4]
    /*
     * fn должен определяться как глобальная переменная jest, и есть вспомогательный метод fn, где переопределяем callback функцию.
     * т.е. fn - это callback, но с функционалом jest.
     */
    fn = jest.fn(x => x ** 2)
    // Вызываем метод map с массивом и функцией fn
    map(array, fn)
  })
  
  // Создаём сценарий, где функция map должна быть вызвана
  test('должна вызывать callback', () => {
    // Ожидаем, что функция fn должна быть вызвана
    expect(fn).toBeCalled()
  })

  // Создаём сценарий, где функция map должна быть вызвана 4 раза
  test('должна вызвать callback 4 раза', () => {
    // Ожидаем, что функция fn будет вызвана 4 раза
    expect(fn).toBeCalledTimes(4)
    /*
     * Обращаемся к функции fn, где вызываем ключи mock и calls, а затем длину.
     * Здесь можем посмотреть кол-во вызовов этой функции.
     * Ожидаем, что кол-во вызванных функций будет равно 4.
     */
    expect(fn.mock.calls.length).toBe(4)
  })

  // Создаём сценарий, где функция должна возводить в степень 2 каждый элемент
  test('должна возвести каждый элемент в степень 2', () => {
    // Ожидаем, что элемент массива при возведении в степень будет равен определённому значению
    expect(fn.mock.results[0].value).toBe(1)
    expect(fn.mock.results[1].value).toBe(4)
    expect(fn.mock.results[2].value).toBe(9)
    expect(fn.mock.results[3].value).toBe(16)
  })

  // Создаём сценарий, где функция fn должна работать
  test('fn должна работать', () => {
    fn
    // Вне зависимости от результата, функция должна вернуть некоторое значение
      .mockReturnValueOnce(100)
      .mockReturnValueOnce(200)
      // При остальных вызовах функция должна вернуть указанное значение
      .mockReturnValue('14')

    // Ожидаем, что при вызове функция fn результат должен равняться указанному значению
    expect(fn()).toBe(100)
    expect(fn()).toEqual(200)
    expect(fn()).toEqual('14')
    expect(fn()).toEqual('14')
  })

})